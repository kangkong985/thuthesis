<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
html
{
overflow-x:hidden;
overflow-y:auto;
}
body,td,th {
font-family: "微软雅黑";
font-size: 12px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
p{
margin-bottom:10px;
}
demo_padding {
line-height: 30px;
}
.zhengwen {
padding-right: 15px;
padding-left: 5px;
padding-bottom:100px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px solid #999999;
padding-right: 10px;
padding-left: 10px;
margin-top:10px;
margin-left:25px;
width:300px;
}
.shubu{
height: 20px;
width: 20px;
margin-left:25px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
color: #666666;
}
a.red:link {color:#FF0000}
a.red:visited {color:#FF0000}
a.red:hover {color:#000000}
a.red:active {color:#000000}

a.orange:link {color:#FF6600}
a.orange:visited {color:#FF6600}
a.orange:hover {color:#000000}
a.orange:active {color:#000000}

a.dark:link {color:#666666}
a.dark:visited {color:#666666}
a.dark:hover {color:#000000}
a.dark:active {color:#000000}

a.pagelink:hover {color:#000000}
a.pagelink:active {color:#000000}

.green{color:#008000}
.gray{color:#666666}
.red{color:#FF0000}
.orange{color:#FF6600}
a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>


<div class="zhengwen">
<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_3.htm">上一页</a>
<a class="pagelink" href="paper_5.htm">下一页</a>
<a class="pagelink" href="paper_11.htm">尾页</a>
页码：4/11页
]
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">119</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/288.htm' target='right' class='orange' >网络中的节点从 OGM 中可以获得前一跳节点到达目的节点的 TQ 值。</a><a href='../sentence_detail/289.htm' target='right' class='orange' >如图3.3所示， A点发出 OGM，该 OGM传播途径的每一个节点根据 OGM中纪录的全局 TQ值，</a><span class='green'>结合自身邻居表存储的本地 TQ值，更新自身到达 A点的 TQ值，并将 OGM中的 TQ值同步更新，</span><span class='green'>之后重广播该 OGM。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">120</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图 3.3 TQ 传播</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">121</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>如果节点 A 发出的 OGM 通过两条不同的路径到达某一节点，接收节点分别 计算两条路径的全局 TQ 值，并选择链路质量更好的那一条作为最优路由路径。</span><span class='green'>没经过一次节点重广播， OGM中的全局 TQ值会加上一个惩罚值，这一实现使协议在选择时更佳倾向于选择跳数更少的路由，</span><span class='green'>全局来讲，这有利于优化信道资源的竞争。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">122</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.2.5 路由选择</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">123</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/297.htm' target='right' class='orange' >不同于很多其他协议计算整个网络的拓扑，存储到达目的节点的整条路由， BATMAN-adv 仅存储到达目的节点的最优下一跳节点。</a><a href='../sentence_detail/298.htm' target='right' class='orange' >下一跳节点收到该数据包 后，会继续寻找最优下一跳发送。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">124</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图 3.4给出了一个路由决策的场景示例。</span><span class='green'>节点 F 发送一个数据包到节点 A。</span><span class='green'>节 点 F 所知道的信息仅为到达节点 A 有两条有效路径，两条路径分别对应两个不同 的 TQ 值。</span><span class='green'>此时，如果途经 D 的路径 TQ 值更高，则 F 选择将数据包交给 D。</span><span class='green'>D 点 经过同样的决策过程，将数据包交给 C，最终由 C 完成最后一跳传输。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">125</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.3 全局 QoS 保障技术</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">126</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>本项目的主要目标是在视频传输 Mesh 网络中提供 QoS 保障，保证在不同场 景下，用户能够接收到流畅的视频流数据。</span><span class='green'>在第二章相关工作中已经介绍了目前 该领域的相关工作的研究现状，这些工作或多或少存在大规模应用的弊端。</span><span class='green'>因此 本文基于全面详尽的实验，提出了一套优化整体视频传输 Mesh 网络 QoS 的技术 方案。</span><span class='green'>整个方案分为如下三项核心技术:</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">127</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.3.1 子网信道隔离</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">128</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>无线网络中核心的技术挑战在于无线信道的开放性，这就意味着当多个设备 需要发送数据时，同一时刻只能有一个设备有效传输。</span><span class='green'>虽然现在有诸如 OFDM[参 考]、MIMO[参考]等技术来应对这一问题，但目前市面上的硬件产品并不都能 够很好的支持这些技术，因此不具有普适性。</span><span class='green'>子网划分即将整个大的 Mesh 网络划 分为多个子网，相邻子网间采用相互正交的信道，从而降低节点间相互信道竞争 造成的干扰。</span><span class='green'>整体上提升网络的吞吐量。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">129</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.3.2 跨层视频帧权重差分</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">130</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>该方法引入 802.11 协议簇的 QoS 保障技术，该技术在系列标准的 802.11e[参 考]子标准中规定。</span><span class='green'>其核心在于将应用层业务数据映射到不同的 mac层优先队列，不同的优先队列有不同的信道接入优先级，</span><span class='green'>从而保障重要的对时延敏感的数据尽快获取信道传输。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">131</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>3.3.3 路径质量敏感的动态切换阈值</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">132</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>在移动场景下，无线 Mesh网络的组网协议会面临更加严峻的挑战，尤其是高速移动的场景下， batman- adv协议的路由切换机制存在缺陷，</span><a href='../sentence_detail/320.htm' target='right' class='orange' >后面的章节将通过深入细致的实验验证，并提出有效的解决方案。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">133</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>上述协议可以在大多数场景中提供稳定可靠的路由功能，但是针对不同的需 求仍然存在很多优化的空间。</span><span class='green'>为了深入的探索协议的运行机制、不同参数的影响， 需要深入协议源码进行实验探究。</span><span class='green'>另外，本项目旨在搭建实际运行的系统，因此 所有实验均在实际的设备上运行测量。</span><span class='green'>为此，开发了手动设定固定路由工具、外 接显示模块装置等功能模块。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">134</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>静态路由设定模块提供给 Mesh 网络管理员手动设定固定路由的工具，包括命 令行即时交互接口。</span><span class='green'>这个工具可以很大程度上提升实验和网络设定的自由度。</span><span class='green'>在 实验中，Mesh 网络可能根据协议形成固定的拓扑结构，一旦产生外界的数据压力， 拓扑结构就会变化，我们很难进行一些压力测试，比如切换条件等一些临界状态 的测试。</span><span class='green'>另外在实际部署中，手动设定部分稳定链路的路由可以保障整体网络拓 扑的稳定，避免因为一些链路的抖动，造成整个网络拓扑变化频繁，影响性能。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">135</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>外接显示模块提供 rssi 轮询显示和带宽测试两项功能。</span><span class='green'>正常模式下，轮询的显 示邻居节点的 rssi 值，当用户需要测量到达子网簇首的带宽时进行模式切换即可 实时测量。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">136</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/331.htm' target='right' class='orange' >3.5该模块通过硬件和软件两部分配合实现。</a><span class='green'>硬件部分采用单片机加数码管， 并集成 USB 接口，通过 USB 接口直接连接到 Mesh 主板。</span><span class='green'>软件部分在 Mesh 主板 运行一个后台 shell 进程检测 USB 口输入信号。</span><span class='green'>正常模式下，后台进程周期性的通 过 iwlist 命令扫描周围邻居节点的 rssi 值。</span><span class='green'>当用户需要测试部署位置到达子网簇首的有效带宽时，通过按测试按键，硬件模块会通过 USB接口通知后台进程进行带宽测试，</span><span class='green'>然后返回测量数值显示在数码管上。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">137</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>网络可视化与诊断系统当网络规模达到一定规模，就很难通过终端监控网络 拓扑、网络性能和网络中节点健康状况。</span><span class='green'>为了更好的提供对于大规模网络的监控 和维护等功能，我们开发了基于 web 端的可视化及诊断系统。</span><span class='green'>我们在一台服务器上搭建 apache服务端，提供 web服务，同时该服务器连接 Mesh网络中的某一个开通了可视化管理功能的节点，</span><span class='green'>开通了可视化管理功能的节点使用可视化数据包获取网络拓扑信息，作为可视化服务器的角色存在与 Mesh网络中。</span><span class='green'>客户端通过 apache 提供的端口登录 web 服务，web 页面实时显示网络的拓扑形态，同时显示 每条链路的 TQ 值指代其链路质量。</span><span class='green'>同时 web 页面封装了一个简单的 shell 控制台， 可以直接和节点交互。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">138</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>本章详细介绍项目系统的实现，集中于介绍项目的三个创新点:</span><span class='green'>子网信道隔 离的部署方案、跨层视频帧权重差分技术、路径质量敏感的动态切换阈值算法。</span><span class='green'>其 中，子网信道隔离从整体网络规划上知道大型 Mesh 网络的架构;</span><span class='green'>跨层优先级队列 映射在将 802.11 系列标准的 QoS 技术引入，针对视频传输提供了强大的 QoS 保 障;</span><span class='green'>移动场景下的 QoS 保障专注于优化 Mesh 节点移动带来的路径切换时延，并 有助于优化固定 Mesh 网络中的路由震荡现象。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">139</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>本章工作基于细致全面的实验和对 BATMAN-adv 代码的在实际系统的调试和 理解，带来的网络性能上的提升巨大。</span><span class='green'>在系统实践中也积累了大量的无线网络规 划经验和 linux 内核模块开发调试的技术，为我们的多个对外项目的实施提供了指 导。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">140</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>4.1 子网信道隔离</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">141</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/351.htm' target='right' class='orange' >出于成本考虑，项目所选择的硬件平台仅支持单一无线接口， 这就意味着每一 个节点设备同一时间只能工作在一个无线信道。</a><span class='green'>而无线信道的开放性所带来的信 道竞争排斥多路并发传输。</span><a href='../sentence_detail/353.htm' target='right' class='orange' >不同的无线终端在进行数据传输之前需要先竞争使用 信道。</a><span class='green'>这个阶段称为信道接入。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">142</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>在 802.11 定义了基本的信道接入方式:</span><a href='../sentence_detail/356.htm' target='right' class='orange' >分布式协调功能，该方式本质上就是 一种 CSMA/CA 多路访问载波侦听冲突避免机制。</a><a href='../sentence_detail/357.htm' target='right' class='orange' >CSMA 机制在工业界广泛使用， 比如以太网中使用的 CSMA/CD，其中 CD 表示冲突检测。</a><a href='../sentence_detail/358.htm' target='right' class='orange' >在无线网络中，因为 隐终端的存在，CD 的方式不可靠，因此多使用 CA 的方式。</a><span class='green'>CSMA/CA 工作流程 如下:</span><span class='green'>当一个终端需要占用信道发送数据时，如果信道繁忙(其他终端正在使用信道)，</span><a href='../sentence_detail/361.htm' target='right' class='orange' >那么就会推迟一段时间进行下一次尝试，如果信道检测为空闲就可以立即发送数据。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">143</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>4.1.1 相邻链路干扰 因为信道竞争和隐终端的影响，如果所有节点选择同一信道则会造成严重的</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">144</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/363.htm' target='right' class='orange' >信道干扰，导致网络总体吞吐量的急剧下降。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">145</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>首先是相邻链路的信道竞争。</span><span class='green'>图 4.1给出了实验图示，节点 1 和节点 4 之间通 信的同时节点 2 和节点 3 通信，产生信道竞争，导致每条链路的实际有效带宽下 降。</span><span class='green'>实验结果如下表 4.1所示。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">146</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>可以明显看出当两条相邻链路同时发送数据时，各自的吞吐量降为原先的一半左右，</span><span class='green'>当相邻的并发链路数量过多时即可能导致每条链路的实际吞吐不足以支持视频流传输。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">147</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>4.1.2 隐终端</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">148</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>隐终端指当网络中存在多个终端时，某终端只能在信道竞争时获知相邻终端的存在，</span><span class='green'>而无法感知其他更远处终端的存在，处于远处的未被感知的终端即称为隐终端。</span><span class='green'>当某终端侦听信道判断当前信道空闲时，就会发送数据，但可能与此同时远处的隐终端也认为信道空闲并发送数据，</span><span class='green'>假设此时两份数据的接收者处于两者的物理位置的中间，则两份数据同时到达将造成混乱，</span><span class='green'>无法分辨，从而无法应答。</span><a href='../sentence_detail/375.htm' target='right' class='orange' > 导致两边的终端不得不反复的重传，甚至发生数据包丢失。</a><span class='green'>以下实验就是探究隐 终端在 Mesh 网络中的影响。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">149</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>首先进行单跳实验，网络拓扑如图 4.2。</span><a href='../sentence_detail/378.htm' target='right' class='orange' >客户端连接 1 节点，服务端连接 5 节 点，图中共计 5 个节点组成一个稳定的无线 Mesh 网络。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">150</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/379.htm' target='right' class='orange' >在客户端和服务端之间，通过 Mesh 网络进行 100 次测试。</a><a href='../sentence_detail/380.htm' target='right' class='orange' >每次测试运行 20 秒，客户端上的发送进程分别以 1 至 100 间隔 1Mbps 的发送带宽向服务端发送 UDP 数据包。</a><span class='green'>每次测量结束，服务端上的服务进程会统计客户端此次通信数据的 有效带宽、时延抖动等数据并告知客户端进程。</span><span class='green'>所有测量结果在客户端汇总整理。</span>
</p>
</div>


<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_3.htm">上一页</a>
<a class="pagelink" href="paper_5.htm">下一页</a>
<a class="pagelink" href="paper_11.htm">尾页</a>
页码：4/11页
]
</div>

<br>
<div style="margin-left:8px">

<div style="text-align:center;background-color:#CA122C;margin-top:30px;overflow:hidden;">
<a href="http://www.paperpass.com/publish/index?from=ppreport_banner" target="_blank" style="display:block;"><img height="180" src="http://file.paperpass.com/images/fabiao.jpg"></a>
</div>

</div>
</div>


<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2016 PaperPass
</p>
</div>
<div style="margin-bottom:400px"></div>
</body>
</html>
