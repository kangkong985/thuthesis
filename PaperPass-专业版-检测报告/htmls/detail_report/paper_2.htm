<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
html
{
overflow-x:hidden;
overflow-y:auto;
}
body,td,th {
font-family: "微软雅黑";
font-size: 12px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
p{
margin-bottom:10px;
}
demo_padding {
line-height: 30px;
}
.zhengwen {
padding-right: 15px;
padding-left: 5px;
padding-bottom:100px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px solid #999999;
padding-right: 10px;
padding-left: 10px;
margin-top:10px;
margin-left:25px;
width:300px;
}
.shubu{
height: 20px;
width: 20px;
margin-left:25px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
color: #666666;
}
a.red:link {color:#FF0000}
a.red:visited {color:#FF0000}
a.red:hover {color:#000000}
a.red:active {color:#000000}

a.orange:link {color:#FF6600}
a.orange:visited {color:#FF6600}
a.orange:hover {color:#000000}
a.orange:active {color:#000000}

a.dark:link {color:#666666}
a.dark:visited {color:#666666}
a.dark:hover {color:#000000}
a.dark:active {color:#000000}

a.pagelink:hover {color:#000000}
a.pagelink:active {color:#000000}

.green{color:#008000}
.gray{color:#666666}
.red{color:#FF0000}
.orange{color:#FF6600}
a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>


<div class="zhengwen">
<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_1.htm">上一页</a>
<a class="pagelink" href="paper_3.htm">下一页</a>
<a class="pagelink" href="paper_11.htm">尾页</a>
页码：2/11页
]
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">38</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/95.htm' target='right' class='orange' >无线 Mesh 网络通常采用分布式路由，即网络中的节点分发并采集其他节点的 局部路由信息。</a><a href='../sentence_detail/96.htm' target='right' class='orange' >然后，每个节点根据收集到的网络路由信息，决定到达目的节点的 最佳路径。</a><a href='../sentence_detail/97.htm' target='right' class='orange' >分布式路由协议又可以分为主动式和反应式两种不同的类别。</a><a href='../sentence_detail/98.htm' target='right' class='orange' >主动式 路由协议中，节点周期性的广播自己的存在，并携带自己所知道的局部路由信息;</a><a href='../sentence_detail/99.htm' target='right' class='orange' > 反应式路由协议则在需要发送数据的时候，即时获取路由信息。</a><a href='../sentence_detail/100.htm' target='right' class='orange' >Mesh 网络的架构 和无线介质的特殊性给路由构建带来了一些特殊的挑战。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">39</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>- 竞争使用共享的无线信道会限制网络的性能。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">40</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>- 用于网络构建的数据包造成额外的开销。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">41</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/103.htm' target='right' class='orange' >- 需要引入漫游机制解决移动节点的接入问题。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">42</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/104.htm' target='right' class='orange' >- 当网络中一个节点失效，可能导致多条路由随之失效。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">43</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>各种不同的协议采用不同的方式解决这些问题，但殊途同归，最终的目标都 是最小化网络构建的额外开销，同时保证最大化网络吞吐量、网络的性能，保持连 接的有效性。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">44</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.2.1 主要路由技术</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">45</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/107.htm' target='right' class='orange' >如前所述，Mesh 网络中的路由技术可以分为主动式路由和反应式路由。</a><a href='../sentence_detail/108.htm' target='right' class='orange' >如果 路由信息的收集和路由的计算在节点需要发送数据时才进行，则该路由方式成为 反应式路由。</a><span class='green'>反之，如果网络的信息分布式存储在网络中的节点中，且每当网络 中的状态发生变化，该变化会即时广播全网络，相关的节点即时更新自己的路由</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">46</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>第2章 相关工作</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">47</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/111.htm' target='right' class='orange' >信息，这种路由方式称为主动式路由。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">48</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/112.htm' target='right' class='orange' >大多数 Mesh 路由协议收集信息和判定路由时以如下两种方式为主要的判定</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">49</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>依据:</span><span class='green'>链路状态和距离向量。</span><a href='../sentence_detail/115.htm' target='right' class='orange' > 基于链路状态的路由，节点将自己相邻链路信息组织成有向图的形式，洪泛</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">50</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>全网。</span><span class='green'>每个节点可以收集到其他节点的局部链路拓扑和质量信息，并基于此构建 整个网络的拓扑信息，并基于不同拓扑路由的权重计算出最短路径，即发送数据 时的路由。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">51</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/118.htm' target='right' class='orange' >基于距离向量的路由，节点仅知道目标节点数据需要送达的下一跳节点，即 数据发送的方向。</a><a href='../sentence_detail/119.htm' target='right' class='orange' >而最佳的下一跳节点的选择则基于到达目标节点的总跳数和每 一跳的链路质量。</a><a href='../sentence_detail/120.htm' target='right' class='orange' >距离向量路由方式不需要计算完整的网络拓扑，因此消耗的额 外开销更少。</a><span class='green'>缺点是，得到的路由通常不是全局最优的。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">52</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/122.htm' target='right' class='orange' >分布式路由需要处理网络中的路由环路现象。</a><span class='green'>路由环路通常出现在两个或者 更多的节点之间，路由环路会导致数据陷入环路，造成额外的网络开销，且数据始 终无法送达最终的目的节点。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">53</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.2.2 优化的链路状态路由 (OLSR)[1]</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">54</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/125.htm' target='right' class='orange' >优化的链路状态路由 (OLSR) 广泛的应用于多种基于嵌入式 Linux 平台的 Mesh 网络中。</a><span class='green'>通常作为守护进程运行在网络层，属于主动式路由，且基于链路 状态做路由决策。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">55</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>在最初的 OLSR 实现中，网络拓扑图的计算很慢且经常在网络状态发生更新 的时失效。</span><span class='green'>路由变化频繁，易形成路由环路，造成网络的低可用性。</span><span class='green'>为了解决这些 问题，OLSR 引入了信的路由决策参数--传输次数期望 (ETX)。</span><span class='green'>新的参数带来了 性能的显著提升，但仍然没有解决路由环路的问题。</span><span class='green'>通过增加拓扑控制数据包的 发送频率可以一定程度上降低路由环路的形成次数。</span><span class='green'>由此造成的额外的路由开销 可以通过限制洪泛距离予以限制--仅向三跳之内的邻居节点洪泛路由变化信息， 这种方法在实践中被证明是有效的。</span><span class='green'>这种技术称为鱼眼机制 (Fish Eye)，该技术保 证了 OLSR 的可用性，但目前还不能完全消除路由环路现象。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">56</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.2.3 Ad-hoc 网络需求驱动的距离向量路由协议 (AODV)[2]</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">57</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/135.htm' target='right' class='orange' >Ad-hoc 网络需求驱动的距离向量路由协议 (AODV) 是一种基于距离向量的反 应式路由协议。</a><a href='../sentence_detail/136.htm' target='right' class='orange' >在该路由协议中，当有节点需要发送数据到目的节点，就先向网络 广播路由请求数据包，通过网络中其他节点包括目的节点的相应，构建瞬时的有 效路由。</a><a href='../sentence_detail/137.htm' target='right' class='orange' >当网络处于相对空闲状态时，该协议最大程度上减少了额外的路由开销。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">58</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/138.htm' target='right' class='orange' >第2章 相关工作 该协议在对能耗要求极高的传感器网络中具有很好的应用价值。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">59</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.2.4 针对移动 Ad-hoc 网络的路由协议 (BATMAN)[3]</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">60</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>针对移动 Ad-hoc 网络的路由协议 2006 年诞生，最初作为 OLSR 的替代者，属 于基于距离向量的主动路由协议。</span><span class='green'>在最初的三个版本中，BATMAN 引入了许多特 性，包括:</span><span class='green'>不对称链路，多接口支持等。</span><a href='../sentence_detail/143.htm' target='right' class='orange' >类似于 OSLR，该协议同样作为用户层的 守护进程运行网络层。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">61</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.2.5 BATMAN 升级版 (BATMAN-adv)[4]</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">62</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>因为 BATMAN 运行再用户层所带来的性能问题，BATMAN-adv 在 2007 年开 始投入研发。</span><a href='../sentence_detail/146.htm' target='right' class='orange' >因为运行在内核态，新的协议节省了大量的内核态和用户态之间拷 贝数据包的开销。</a><a href='../sentence_detail/147.htm' target='right' class='orange' >另一方面，新的协议运行在链路层，用 mac 地址做路由。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">63</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>BATMAN-adv 在链路层对数据做封装，对网络层透明，因此可以兼容其他的 网络层协议，也使得其他特性的加入更加容易。</span><span class='green'>现在的 BATMAN-adv 支持非 Mesh 设备的桥接和漫游。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">64</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2011 年，BATMAN-adv 已经添加进 Linux 内核开发主线树。</span><span class='green'>2.3 802.11 协议簇 QoS 支持</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">65</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/152.htm' target='right' class='orange' >802.11标准族制定对无线局域网的QoS保障的标准802.11e[7]。</a><a href='../sentence_detail/153.htm' target='right' class='orange' >802.11 e将 mac层数据按照数据的业务类型划分为四个不同的优先级队列，每一个队列在竞争使用无线信道是具有不同的优先级，</a><a href='../sentence_detail/154.htm' target='right' class='orange' >优先级通过竞争窗口大小的设置从而控制竞争成功的概率实现。</a><a href='../sentence_detail/155.htm' target='right' class='orange' >在第四章中将对该优先级队列的机制详细介绍。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">66</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.4 无线 Mesh 网络信道分配相关研究</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">67</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/157.htm' target='right' class='orange' >Ashish Raniwala 等人在 2004 年就进行了无线 Mesh 网络信道分配方面的研究 工作 [8]。</a><span class='green'>作者设计了多网卡接口 Mesh 路由设备，并基于该设备进行组网建模。</span><span class='green'>另 外提出了一种对干扰的评估方案。</span><span class='green'>最终通过对信道干扰进行建模，然后以最小化 Mesh 路由节点之间的干扰为优化目标，最终导出启发式的信道分配最优化算法。</span><span class='green'>实验结果显示所提信道分配方案相对于传统分配方法取得了显著的性能提升。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">68</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>文章[9]中， Hisham针对基于认知无线模块的无线 Mesh网络的存到分配问题，尝试寻找一种能够提供链路级别 QoS保障，</span><a href='../sentence_detail/163.htm' target='right' class='orange' >最大化网络覆盖，同时减少控制信道需求的信道分配分配方案。</a><a href='../sentence_detail/164.htm' target='right' class='orange' >并提出了一种基于接收者的信道分配方案同时满足前述目标。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">69</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>上述工作都是基于特定的硬件平台，或者是支持多网卡接口或者是基于认知 无线电模块技术，但目前实际商用的无线设备并不具有这样的特性。</span><span class='green'>相关的研究 工作还有[10] [11] 提出了类似[8] 但从最小化干扰的角度触发的思路。</span><span class='green'>文章[12] 从对干 扰建模到路由 QoS 技术提出了一种综合的跨层方案。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">70</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>2.5 无线 Mesh 网络视频传输相关研究</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">71</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>基于无线 Mesh 网络搭建高性能实时视频流传输系统方面已经有过诸多的探 索性工作。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">72</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>A.</span><a href='../sentence_detail/171.htm' target='right' class='orange' > Rowe等人的文章提出了一种无线分布式实时监控系统 OmniEye[13]，提出在视频流应用的场景中，</a><span class='green'>为了在摄像头数量增多时最大限度的保证图像质量，需要提升网络的高可用性。</span><span class='green'>实验发现，使用标准802.11标准的 MAC协议 DCF信道接入机制，当每个摄像头的视频流占用带宽在1 Mbps时，</span><span class='green'>系统最大可负载的摄像头数量大约为5-6个。</span><span class='green'>当摄像头超过这个数量时，就会出现严重的抖动现象影响视频 质量。</span><span class='green'>文章认为性能的显著下降来自于多跳场景下隐终端的影响。</span><span class='green'>针对这一问题， 文章提出了一种时间同步的应用层 MAC 协议- TSAM，该协议运行在 802.11 之 上。</span><span class='green'>TSAM 禁用了 802.11 的冲突退避机制，并基于时分复用技术给每一个节点分 配时间窗口，从而消除了竞争，保证无线信道的最大可用性。</span><span class='green'>实验显示，TSAM 在 控制端到端延时的同时通过顺序时间窗口保证了节点之间的同步。</span><span class='green'>该工作对节点 设备的时钟同步要求较高，且需要修改现有 802.11 协议的冲突退避机制，不能够 很好的兼容现有协议。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">73</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>Choumas 等人提出并特征化了一种针对视频流多播的机会路由算法[14]，该算 法特别适用于两跳之内的无线 Mesh 网络。</span><a href='../sentence_detail/182.htm' target='right' class='orange' >文章通过分类不同的视频数据并赋予 不同的权重，从而提升 QoS。</a><span class='green'>对于视频流数据而言，延时是一个重要的考量的指 标，相比之下，即使因此发生一定的丢包都可以接受。</span><span class='green'>基于此，文章提出 ViMOR， 一种视频流多播机会路由协议，且聚焦于跳数小于等于两跳的拓扑结构。</span><span class='green'>相比于 MORE[15]，ViMOR 能够提升网络的吞吐量同时提升视频接受的质量。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">74</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>文章[16] 中，Le Dang 等人提出了一种挑选对等节点的参数-MSM(Multiplication Selector Metric)。</span><span class='green'>该参数可以解决传统的基于假发的参数面临的两个局限:</span><a href='../sentence_detail/188.htm' target='right' class='orange' >瓶颈链 路的识别和跳数计数。</a><span class='green'>且可以和任意的链路质量感知参数协同而不需要额外的网 络开销。</span><span class='green'>在此基础上，文章提出了一种跨层的基于无线链路质量感知的对等节点 选择机制-WLO(Wireless Link quality- aware Overlay)。</span><span class='green'>WLO 根据 MSM 参数的值 在存有目标内容的对等网络节点中选择最优的节点。</span><span class='green'>仿真也取得了不错的性能提 升。</span>
</p>
</div>


<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_1.htm">上一页</a>
<a class="pagelink" href="paper_3.htm">下一页</a>
<a class="pagelink" href="paper_11.htm">尾页</a>
页码：2/11页
]
</div>

<br>
<div style="margin-left:8px">

<div style="text-align:center;background-color:#CA122C;margin-top:30px;overflow:hidden;">
<a href="http://www.paperpass.com/publish/index?from=ppreport_banner" target="_blank" style="display:block;"><img height="180" src="http://file.paperpass.com/images/fabiao.jpg"></a>
</div>

</div>
</div>


<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2016 PaperPass
</p>
</div>
<div style="margin-bottom:400px"></div>
</body>
</html>
