<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
html
{
overflow-x:hidden;
overflow-y:auto;
}
body,td,th {
font-family: "微软雅黑";
font-size: 12px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
p{
margin-bottom:10px;
}
demo_padding {
line-height: 30px;
}
.zhengwen {
padding-right: 15px;
padding-left: 5px;
padding-bottom:100px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px solid #999999;
padding-right: 10px;
padding-left: 10px;
margin-top:10px;
margin-left:25px;
width:300px;
}
.shubu{
height: 20px;
width: 20px;
margin-left:25px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
color: #666666;
}
a.red:link {color:#FF0000}
a.red:visited {color:#FF0000}
a.red:hover {color:#000000}
a.red:active {color:#000000}

a.orange:link {color:#FF6600}
a.orange:visited {color:#FF6600}
a.orange:hover {color:#000000}
a.orange:active {color:#000000}

a.dark:link {color:#666666}
a.dark:visited {color:#666666}
a.dark:hover {color:#000000}
a.dark:active {color:#000000}

a.pagelink:hover {color:#000000}
a.pagelink:active {color:#000000}

.green{color:#008000}
.gray{color:#666666}
.red{color:#FF0000}
.orange{color:#FF6600}
a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>


<div class="zhengwen">
<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_8.htm">上一页</a>
<a class="pagelink" href="paper_10.htm">下一页</a>
<a class="pagelink" href="paper_11.htm">尾页</a>
页码：9/11页
]
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">278</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>.(4) 试验车继续向 A点行驶，2跳路径 TQ值逐渐减小，3跳路径(4-]1-]2-]3) TQ值逐渐增大，</span><span class='green'>当试验车靠近 A点时，视频断开连接。</span><span class='green'>经过 30 秒左右视频连 接恢复。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">279</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>.(5) 改变 TQ值计算的滑动窗口大小会对实验效果产生影响，一定程度上会加快 TQ值的更新，</span><span class='green'>但窗口过小，比如设为1的情况下会造成负面影响，在网络不稳定的情况下导致 TQ值变化剧烈。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">280</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>.(6) 改变 OGM发包频率效果显著， TQ切换速度显著加快，实验中讲 OGM发包频率从1000 ms改为200 ms，</span><span class='green'>相应的试验车反向行驶到2号节点时，视频断开的时间间隔由30秒缩短为5秒。</span><span class='green'>同样的，当试验车反向行驶，靠近 A 点 时，视频断开的时间间隔也缩短为 4 秒左右。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">281</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>由以上实验我们发现当路径的切换是从长路径 (跳数更多的路径) 向短路径 (跳数 更少的路径) 切换时，可以达到完全的无缝切换;</span><span class='green'>但是，当切换是从短路径向长路 39</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">282</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>第4章 项目实现</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">283</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/775.htm' target='right' class='orange' >径切换时，通信会有一段时间的断开。</a><span class='green'>另外，缩小 TQ 值计算的滑动平均窗口或增 加 OGM 发包的频率均可以增强链路对 TQ 值变化的敏感性，很大程度上增加切换 的速度。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">284</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>C. 实验结果及分析</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">285</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>实验暴露的问题是，为什么从短路径切换到长路径会出现一段时间的通信 中断。</span><span class='green'>这个问题可以从 BATMAN-adv 的路由选择算法得到答案。</span><span class='green'>参考实验示意 图 4.24，试验车回程过程中，初始时，试验车与 3 号节点之间显然通过单跳路径 (4-]3)通信;</span><span class='green'>当试验车行驶到 C点时，两跳路径(4-]2-]3)就成为一条备选路径，</span><span class='green'>此时4号节点有两种路径选择，但此时会继续选择单跳路径(因为两跳路径的 TQ惩罚，</span><span class='green'>此时单跳路径的 TQ值会明显大于两跳)。</span><span class='green'>此时单跳路径的 TQ 值显示为 230， 然而由于 TQ 值更新的滞后性 (为了减小网络抖动带来的影响)，实际 TQ 值是小于 230 的;</span><span class='green'>而两跳路径的 TQ 值显示为 225。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">286</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>当试验车继续行驶，会出现这样一段时间:</span><span class='green'>单跳路径的 TQ 值显示为 225 左 右，然而因为 TQ 值更新滞后，实际要远小于 225(差值与试验车行驶速度有关)， 导 致单条路径无法正常通信。</span><span class='green'>而两跳路径 TQ 值也为 225(因为需要减去 30 的多跳惩 罚值，两跳路径的 TQ 值最大为 225)。</span><span class='green'>于是，即使两跳路径的通信质量明显好于单 跳路径，但由于 TQ 值无法及时真实地反应这个差异，也就存在这样一个时间窗口 无法正常通信。</span><span class='green'>相反的，如果从长路径切换到短路径，就不存在这样一个时间窗 口。</span><span class='green'>因为如果短路径能够支持正常通信，那么它的 TQ 值不会明显小于长路径，当 长路径的 TQ 值衰退到达一定程度就会触发路径切换。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">287</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>至于缩短 TQ值滑动平均窗口和增加 OGM发包频率，虽然增加了链路切换的敏感性，但可能造成路径切换频繁，</span><span class='green'>在一些场景下可能链路质量波动频繁，导致链路切换频繁，进儿导致网络无法提供正常的数据传输功能。</span><span class='green'>这也会成为网络遭受 DOS 攻击的一个隐患。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">288</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>4.3.3 路由切换优化</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">289</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>在实验阶段已经尝试了两种解决方案，并做了分析，一种是缩减 TQ值计算的滑动窗口，</span><span class='green'>另一种是增大 OGM的发包频率，两者同样都会造成链路的抖动，导致无法提供正常的数据传输服务。</span><span class='green'>但是两种方法确实可以很好的提升路由切换的速 率。</span><span class='green'>于是问题转化为如何在较小的滑动窗口和较高的 OGM 发包频率下减少路由 抖动的产生?</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">290</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>BATMAN-adv 在路由选择算法上考虑了路由抖动的问题。</span><span class='green'>它的实现思路很简 40</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">291</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>第4章 项目实现</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">292</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>单，只有在发现一条路径的整体 QT 值明显优于当前使用的链路时才会切换到新 的路径上。</span><span class='green'>所谓明显即存在一个固定的切换阈值，只有当存在一条链路的 TQ 值高 于当前链路 TQ 值至少切换阈值时才会进行链路切换。</span><span class='green'>固定阈值的方法在一些场 景下适用，但是也存在显著的缺陷，如果阈值设得过低，则不能防止路由抖动;</span><span class='green'>如 果阈值设得过高，那么当当前路径 TQ 值较低，以致不能提供良好的传输带宽时， 不能够及时切换到 TQ 值较大的链路上。</span><span class='green'>那么能否找到一个合理的阈值，在两者之 间取得平衡呢?</span><span class='green'>很遗憾，不存在这样的万能阈值，因为无线链路本身受环境影响 非常大，在不同的环境中，这个阈值的取值会千差万别。</span><span class='green'>那么，如何设定一个合理 的路径切换机制呢?</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">293</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>面对上述问题，我们引入了新的动态路由切换指标。</span><span class='green'>新的指标可以直接和 TQ 值衔接，不需要改变现有 TQ 值的计算方法。</span><a href='../sentence_detail/812.htm' target='right' class='orange' >目标是尽量选择质量较好的链路，同 时尽量减少路由波动，维持网络拓扑的稳定。</a><span class='green'>设新的动态路由切换指标为 h。</span><span class='green'>h 和 BATMAN-adv 中原先的切换阈值功能类似，但会随着 TQ 值和切换频度的变化而 变化。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">294</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>BATMAN-adv 在进行路由决策时，如果是第一次建立此条路由，则在路由表 中选择 TQ 值最大的路径;</span><span class='green'>如果已经存在一条正在使用的路径，则在路由表中查 看，是否存在 TQ 值显著大于当前路径 TQ 值的路径，如果存在则替换当前路径， 否则仍然使用当前路径。</span><span class='green'>引入 h 后，路由决策算法为:</span><a href='../sentence_detail/818.htm' target='right' class='orange' >如果第一次建立某条路由 时，在路由表中选择 TQ 最大的路径;</a><span class='green'>如果已经存在一条正在使用的路径，则在路 由表中查看，是否存在 TQ 值超出当前路径 TQ 值至少 h 的路径，若存在则以之替 换当前路径，否则仍使用当前路径。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">295</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>具体的，h 定义如下:</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">296</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>h = max{a ∗ ⌊logTQ⌋ + b ∗ ⌊log c⌋ + h0， h0} (4-5)</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">297</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>其中，c 为选择当前路径的频次，利用路由表项的留用字段存储，每次选择该条路 径时加 1。</span><span class='green'>h0 表示路径切换的最低阈值，可以理解为 BATMAN-adv 原来的切换阈 值，但取值较低，作用仅在于过滤因链路轻微的暂态波动干扰。</span><span class='green'>在该式中，log T Q 的取值范围为 −∞ [ a ∗ ⌊log T Q⌋ ≤ 8 ∗ a， 0 ≤ b ∗ ⌊log c⌋ [ ∞。</span><span class='green'>而实际上，同一条路径切换频次在我们的统计数据中，极少达到千级，大多数在几十次，</span><span class='green'>b∗⌊ log c⌋的取值范围在0≤ b∗⌊ log c⌋≤5∗ b的范围内。</span><span class='green'>实验中，我们取 h0 为 5，这样得到 h 的取值范围为 [5， 8 ∗ a + 5 ∗ b + 5]。</span><span class='green'>公式中，两个取整项是为了和 BATMAN-adv 的 TQ 值数据类型保持一致。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">298</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>上述公式的实践解释如下:</span><span class='green'>当当前路径 TQ 值较低时，意味着路径质量差，此 41</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">299</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>第4章 项目实现</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">300</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>时会更加偏向于能够尽快的切换到通信质量较好的链路，所以当 TQ值低的时候，切换阈值 h较低，</span><span class='green'>当 TQ增大时，切换阈值逐渐增大，显然当 TQ值较大时，也就是说链路质量足够好，</span><span class='green'>此时即使另一条链路质量有一个明显的优势，当前链路也足够承载数据量，出于维持网络拓扑稳定的目的，</span><span class='green'>尽量少的切换，此时切换阈值 h相应的较大。</span><span class='green'>另一方面，从切换频次的角度考虑，如果很少切换到当前链路，也就是当前链路的 c较低，</span><a href='../sentence_detail/837.htm' target='right' class='orange' >有理由相信可能是链路质量波动导致暂时的链路质量优势，倾向于选择其他更稳定的链路，</a><span class='green'>于是切换阈值 h自适应的调整为较低值;</span><span class='green'>如果当前链路切换频次较高，也就有理由相信当前链路相对较稳定的维持在高质量水平，</span><span class='green'>倾向于不进行链路切换，于是切换阈值 h自适应的调整为较大。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">301</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>4.3.4 动态阈值实现 A.</span><span class='green'>BATMAN-adv 结构</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">302</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>BATMAN-adv 是二层协议，作为一个 Linux 内核模块加在到系统内核。</span><span class='green'>它作 为网络栈中单独一层向上层的网络层提供虚拟的 Mesh 接口，并向下层提供网络层 接口。</span><span class='green'>如图 4.25 所示。</span><span class='green'>上层网络层只需要使用 BATMAN-adv 提供的接口，Mesh 网络本身对网络层透明。</span><span class='green'>同时下层使用虚拟的网路层接口，同样不需要知道 Mesh 网络本身的存在。</span><span class='green'>这就使得 Mesh 网络如同一个虚拟的交换机，原来网络栈中的一 切角色都只需要向其提供的接口发送数据，而不需要任何改变。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">303</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>B.</span><span class='green'>BATMAN-adv 功能模块及模块间交互</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">304</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>BATMAN-adv 模块载入系统内核并通过配置添加一个系统网络接口后，模块 即完成注册，并开始接收 BATMAN-adv 类型的数据包。</span><span class='green'>相应的以太网类型和虚拟接 口都完成创建。</span><span class='green'>BATMAN-adv 可以拆借为很多个相互协作的功能模块，在图 4.26中 描述了它们之间的相互关系和数据流向。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">305</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>图 4.26 BATMAN-adv 功能模块</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">306</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>soft-interface.c 模块中的函数使用虚拟网络接口。</span><span class='green'>发送数据包时，数据包由 soft- interface.c 模块进入 unicast.c 模块，unicast.c 模块将数据包进行 batman 包头封装， 然后转交给 send.c 模块发送。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">307</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/857.htm' target='right' class='orange' >在 hard-interface.c 模块中设置网络设备的回调函数。</a><span class='green'>当网络设备的接收缓存 中有数据时就会触发 hard-intervace.c 中的函数进行处理。</span><a href='../sentence_detail/859.htm' target='right' class='orange' >模块接收到数据包后，转 交给 routing.c 模块做进一步处理。</a><a href='../sentence_detail/860.htm' target='right' class='orange' >如果这个数据包是需要转发的，就会进一步转 交给 send.c 模块。</a><span class='green'>如果是目的地址是自己，就会转交给 soft-interface.c 模块。</span>
</p>
</div>


<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="paper_8.htm">上一页</a>
<a class="pagelink" href="paper_10.htm">下一页</a>
<a class="pagelink" href="paper_11.htm">尾页</a>
页码：9/11页
]
</div>

<br>
<div style="margin-left:8px">

<div style="text-align:center;background-color:#CA122C;margin-top:30px;overflow:hidden;">
<a href="http://www.paperpass.com/publish/index?from=ppreport_banner" target="_blank" style="display:block;"><img height="180" src="http://file.paperpass.com/images/fabiao.jpg"></a>
</div>

</div>
</div>


<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2016 PaperPass
</p>
</div>
<div style="margin-bottom:400px"></div>
</body>
</html>
